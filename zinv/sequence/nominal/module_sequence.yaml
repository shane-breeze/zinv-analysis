sequence:
    - name: "event_tools"
      module: "Readers.EventTools"
      args:
          maxsize: 8
      collector: "NullCollector"
    - name: "collection_creator"
      module: "Readers.CollectionCreator"
      args:
          collections: [
              "CaloMET", "MET", "Jet", "Electron", "Muon", "Photon", "Tau",
              "GenMET", "GenPart", "GenJet", "GenDressedLepton", "LHEPart",
          ]
      collector: "NullCollector"
    - name: "gen_boson_producer"
      module: "Readers.GenBosonProducer"
      args:
          data: False
      collector: "NullCollector"
    - name: "lhe_part_assigner"
      module: "Readers.LHEPartAssigner"
      args:
          old_parents: ["WJetsToLNu", "DYJetsToLL", "ZJetsToLL", "GStarJetsToLL"]
          data: False
      collector: "NullCollector"
    - name: "gen_part_assigner"
      module: "Readers.GenPartAssigner"
      args:
          old_parents: ["WJetsToLNu", "DYJetsToLL", "ZJetsToLL", "GStarJetsToLL"]
          data: False
      collector: "NullCollector"
    - name: "jec_variations"
      module: "Readers.JecVariations"
      args:
          jes_unc_file: ""
          jer_sf_file: ""
          jer_file: ""
          apply_jer_corrections: True
          jes_regex: "jes(?P<source>.*)"
          unclust_threshold: 15.
          maxdr_jets_with_genjets: 0.2
          ndpt_jets_with_genjets: 3.
          data: False
      collector: "NullCollector"
    - name: "object_functions"
      module: "Readers.ObjectFunctions"
      args:
          unclust_threshold: 15.
          selections: [
              ["Jet", "JetVeto", True],
              ["Jet", "JetVetoNoSelection", True],
              ["Jet", "JetSelection", True],
              ["Jet", "JetFwdSelection", True],
              ["Jet", "JetBVeto", True],
              ["Jet", "JetBVetoNoSelection", True],
              ["Jet", "JetBSelection", True],
              ["Muon", "MuonVeto", False],
              ["Muon", "MuonVetoNoSelection", False],
              ["Muon", "MuonSelection", False],
              ["Electron", "ElectronVeto", False],
              ["Electron", "ElectronVetoNoSelection", False],
              ["Electron", "ElectronSelection", False],
              ["Photon", "PhotonVeto", False],
              ["Photon", "PhotonVetoNoSelection", False],
              ["Photon", "PhotonSelection", False],
              ["Tau", "TauVeto", True],
              ["Tau", "TauVetoNoSelection", True],
              ["Tau", "TauSelection", True],
          ]
      collector: "NullCollector"
    - name: "skim_collections"
      module: "Readers.SkimCollections"
      collector: "NullCollector"
    - name: "tau_cross_cleaning"
      module: "Readers.ObjectCrossCleaning"
      args:
          collections: ["Tau"]
          ref_collections: ["MuonVeto", "ElectronVeto"]
          mindr: 0.4
      collector: "NullCollector"
    - name: "jet_cross_cleaning"
      module: "Readers.ObjectCrossCleaning"
      args:
          collections: ["Jet"]
          ref_collections: ["MuonVeto", "ElectronVeto", "PhotonVeto", "TauVeto"]
          mindr: 0.4
      collector: "NullCollector"
    - name: "event_functions"
      module: "Readers.EventFunctions"
      collector: "NullCollector"
    - name: "trigger_checker"
      module: "Readers.TriggerChecker"
      collector: "NullCollector"
    - name: "certified_lumi_checker"
      module: "Readers.CertifiedLumiChecker"
      args:
          lumi_json_path: ""
          mc: False
      collector: "NullCollector"
    - name: "selection_producer"
      module: "Readers.SelectionProducer"
      collector: "NullCollector"
    - name: "weight_xsection_lumi"
      module: "Readers.WeightXsLumi"
      args:
          data: False
      collector: "NullCollector"
    - name: "weight_pdf_scale"
      module: "Readers.WeightPdfScale"
      args:
          data: False
      collector: "NullCollector"
    - name: "weight_pu"
      module: "Readers.WeightPileup"
      args:
          correction_file: ""
          variable: "Pileup_nTrueInt"
          data: False
      collector: "NullCollector"
    - name: "weight_met_trigger"
      module: "Readers.WeightMetTrigger"
      args:
          correction_files:
              0: ""
              1: ""
              2: ""
          data: False
      collector: "NullCollector"
    - name: "weight_electrons"
      module: "Readers.WeightObjects"
      args:
          correctors:
              - name: "eleIdIsoTight"
                collection: "Electron"
                binning_variables: ["ev, source, nsig: ev.Electron.eta", "ev, source, nsig: ev.Electron_ptShift(ev, source, nsig)"]
                weighted_paths: [[1, ""]]
                add_syst: "ev, source, nsig: awk.JaggedArray.zeros_like(ev.Electron.eta)"
                nuisances: ["eleIdIsoTight", "eleEnergyScale"]
              - name: "eleIdIsoVeto"
                collection: "Electron"
                binning_variables: ["ev, source, nsig: ev.Electron.eta", "ev, source, nsig: ev.Electron_ptShift(ev, source, nsig)"]
                weighted_paths: [[1, ""]]
                add_syst: "ev, source, nsig: awk.JaggedArray.zeros_like(ev.Electron.eta)"
                nuisances: ["eleIdIsoVeto", "eleEnergyScale"]
              - name: "eleReco"
                collection: "Electron"
                binning_variables: ["ev, source, nsig: ev.Electron.eta", "ev, source, nsig: ev.Electron_ptShift(ev, source, nsig)"]
                weighted_paths: [[1, ""]]
                add_syst: "ev, source, nsig: 0.01*((ev.Electron_ptShift(ev, source, nsig)<20) | (ev.Electron_ptShift(ev, source, nsig)>80))"
                nuisances: ["eleReco", "eleEnergyScale"]
              - name: "eleTrig"
                collection: "Electron"
                binning_variables: ["ev, source, nsig: ev.Electron_ptShift(ev, source, nsig)", "ev, source, nsig: np.abs(ev.Electron.eta)"]
                weighted_paths: [[1, ""]]
                add_syst: "ev, source, nsig: awk.JaggedArray.zeros_like(ev.Electron.eta)"
                nuisances: ["eleTrig", "eleEnergyScale"]
          data: False
      collector: "NullCollector"
    - name: "weight_muons"
      module: "Readers.WeightObjects"
      args:
          correctors:
              - name: "muonIdTight"
                collection: "Muon"
                binning_variables: ["ev, source, nsig: np.abs(ev.Muon.eta)", "ev, source, nsig: ev.Muon_ptShift(ev, source, nsig)"]
                weighted_paths:
                    - [19.7, ""]
                    - [16.2, ""]
                add_syst: "ev, source, nsig: 0.01*awk.JaggedArray.ones_like(ev.Muon.eta)"
                nuisances: ["muonIdTight", "muonPtScale"]
              - name: "muonIdLoose"
                collection: "Muon"
                binning_variables: ["ev, source, nsig: np.abs(ev.Muon.eta)", "ev, source, nsig: ev.Muon_ptShift(ev, source, nsig)"]
                weighted_paths:
                    - [19.7, ""]
                    - [16.2, ""]
                add_syst: "ev, source, nsig: 0.01*awk.JaggedArray.ones_like(ev.Muon.eta)"
                nuisances: ["muonIdLoose", "muonPtScale"]
              - name: "muonIsoTight"
                collection: "Muon"
                binning_variables: ["ev, source, nsig: np.abs(ev.Muon.eta)", "ev, source, nsig: ev.Muon_ptShift(ev, source, nsig)"]
                weighted_paths:
                    - [19.7, ""]
                    - [16.2, ""]
                add_syst: "ev, source, nsig: 0.005*awk.JaggedArray.ones_like(ev.Muon.eta)"
                nuisances: ["muonIsoTight", "muonPtScale"]
              - name: "muonIsoLoose"
                collection: "Muon"
                binning_variables: ["ev, source, nsig: np.abs(ev.Muon.eta)", "ev, source, nsig: ev.Muon_ptShift(ev, source, nsig)"]
                weighted_paths:
                    - [19.7, ""]
                    - [16.2, ""]
                add_syst: "ev, source, nsig: 0.005*awk.JaggedArray.ones_like(ev.Muon.eta)"
                nuisances: ["muonIsoLoose", "muonPtScale"]
              - name: "muonTrig"
                collection: "Muon"
                binning_variables: ["ev, source, nsig: np.abs(ev.Muon.eta)", "ev, source, nsig: ev.Muon_ptShift(ev, source, nsig)"]
                weighted_paths:
                    - [19.7, ""]
                    - [16.2, ""]
                add_syst: "ev, source, nsig: 0.005*awk.JaggedArray.ones_like(ev.Muon.eta)"
                nuisances: ["muonTrig", "muonPtScale"]
          data: False
      collector: "NullCollector"
    - name: "weight_taus"
      module: "Readers.WeightObjects"
      args:
          correctors:
              - name: "tauIdTight"
                collection: "Tau"
                binning_variables: ["ev, source, nsig: ev.Tau_ptShift(ev, source, nsig)"]
                weighted_paths: [[1, ""]]
                add_syst: "ev, source, nsig: 0.05*awk.JaggedArray.ones_like(ev.Tau.eta)"
                nuisances: ["tauIdTight", "tauEnergyScale"]
          data: False
      collector: "NullCollector"
    - name: "weight_photon"
      module: "Readers.WeightObjects"
      args:
          correctors:
              - name: "photonIdLoose"
                collection: "Photon"
                binning_variables:
                    - "ev, source, nsig: ev.Photon.eta"
                    - "ev, source, nsig: ev.Photon_ptShift(ev, source, nsig)"
                weighted_paths: [[1, ""]]
                add_syst: "ev, source, nsig: awk.JaggedArray.zeros_like(ev.Photon.eta)"
                nuisances: ["photonIdLoose", "photonEnergyScale"]
              - name: "photonPixelSeedVeto"
                collection: "Photon"
                binning_variables:
                    - "ev, source, nsig: ev.Photon.r9"
                    - "ev, source, nsig: np.abs(ev.Photon.eta)"
                    - "ev, source, nsig: ev.Photon_ptShift(ev, source, nsig)"
                weighted_paths: [[1, ""]]
                add_syst: "ev, source, nsig: awk.JaggedArray.zeros_like(ev.Photon.eta)"
                nuisances: ["photonPixelSeedVeto", "photonEnergyScale"]
          data: False
      collector: "NullCollector"
    - name: "weight_btags"
      module: "Readers.WeightBTagging"
      args:
          operating_point: "medium"
          threshold: 0.8484
          measurement_types:
              b: "comb"
              c: "comb"
              udsg: "incl"
          calibration_file: ""
          data: False
      collector: "NullCollector"
    - name: "weight_qcd_ewk"
      module: "Readers.WeightQcdEwk"
      args:
          input_paths:
              ZJetsToNuNu: ""
              WJetsToLNu: ""
              DYJetsToLL: ""
          underflow: True
          overflow: True
          formula: "((K_NNLO + d1k_qcd*d1K_NNLO + d2k_qcd*d2K_NNLO + d3k_qcd*d3K_NNLO)*(1 + kappa_EW + d1k_ew*d1kappa_EW + isz*(d2k_ew_z*d2kappa_EW + d3k_ew_z*d3kappa_EW) + isw*(d2k_ew_w*d2kappa_EW + d3k_ew_w*d3kappa_EW)) + dk_mix*dK_NNLO_mix)/(K_NLO + d1k_qcd*d1K_NLO + d2k_qcd*d2K_NLO + d3k_qcd*d3K_NLO)"
          params: [
              "K_NLO", "d1K_NLO", "d2K_NLO", "d3K_NLO", "K_NNLO", "d1K_NNLO",
              "d2K_NNLO", "d3K_NNLO", "kappa_EW", "d1kappa_EW", "d2kappa_EW",
              "d3kappa_EW", "dK_NNLO_mix",
          ]
          variation_names: [
              "d1k_qcd", "d2k_qcd", "d3k_qcd", "d1k_ew", "d2k_ew_z", "d2k_ew_w",
              "d3k_ew_z", "d3k_ew_w", "dk_mix",
          ]
          data: False
      collector: "NullCollector"
    - name: "weight_prefiring"
      module: "Readers.WeightPreFiring"
      args:
          jet_eff_map_path: ""
          photon_eff_map_path: ""
          jet_selection: "ev, source, nsig: (ev.Jet_ptShift(ev, source, nsig)>20) & ((2<np.abs(ev.Jet_eta)) & (np.abs(ev.Jet_eta)<3))"
          photon_selection: "ev, source, nsig: (ev.Photon_ptShift(ev, source, nsig)>20) & ((2<np.abs(ev.Photon_eta)) & (np.abs(ev.Photon_eta)<3))"
          syst: 0.2
          data: False
      collector: "NullCollector"
    - name: "hdf5_reader"
      module: "Collector.HDF5Reader"
      collector: "NullCollector"
